import { Guild, User } from '@r6ru/db';
import { ONLINE_TRACKER, VERIFICATION_LEVEL } from '@r6ru/types';
import { combinedPrompt } from '@r6ru/utils';
import { Command } from 'discord-akairo';
import { Message, User as U } from 'discord.js';
import { debug } from '../../..';
import ENV from '../../../utils/env';
import { verify } from '../../../utils/qr';
import { syncMember } from '../../../utils/sync';

interface IArgs {
    target: U;
    scan: 'scan';
}

export default class Verify extends Command {
    public constructor() {
        super('verify', {
            aliases: ['verify', 'V'],
            args: [{
                default: (msg: Message) => msg.author,
                id: 'target',
                type: 'user',
                unordered: true,
            }, {
                id: 'scan',
                type: ['scan'],
                unordered: true,
            }],
            cooldown: 5000,
        });
    }

    // @TryCatch(debug)
    public exec = async (message: Message, args: IArgs) => {
        const { target, scan } = args;
        if (target.id !== message.author.id && ((message.channel.type === 'text' && message.member.hasPermission('MANAGE_ROLES')) || [...this.client.ownerID].includes(message.author.id))) {
            const dbUserTarget = await User.findByPk(target.id);
            if (scan === 'scan') {
                return this.verifyDM(await target.send('_...QR-–∫–æ–¥ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º..._') as Message, dbUserTarget);
            } else {
                return this.verifyMember(message, dbUserTarget);
            }
        }
        const dbUser = await User.findByPk(message.author.id);
        if (dbUser && dbUser.genome) {
            if (dbUser.verificationLevel >= VERIFICATION_LEVEL.QR) {
                return message.reply('–≤—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!');
            }
            if (message.channel.type === 'dm') {
                return this.verifyDM(message, dbUser);
            } else {
                return this.verifyGuild(message, dbUser);
            }
        } else {
            return message.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
        }
    }

    // @TryCatch(debug)
    private verifyMember = async (message: Message, dbUser: User) => {
        dbUser.requiredVerification = VERIFICATION_LEVEL.QR;
        await dbUser.save();
        await syncMember(await Guild.findByPk(message.guild.id), dbUser);
        debug.log(`<@${message.author.id}> –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ <@${dbUser.id}> ${ONLINE_TRACKER}${dbUser.genome}`);
        try {
            const member = await message.guild.members.fetch(dbUser.id);
            await (member.voice && member.voice.setChannel(null));
        } catch (error) {
            console.log('member not in voice');
        }
        return message.reply('–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω–∞');
    }

    // @TryCatch(debug)
    private verifyDM = async (message: Message, dbUser: User) => {
        try {
            switch (await verify(dbUser.genome, dbUser.id)) {
                case true: {
                        dbUser.verificationLevel = VERIFICATION_LEVEL.QR;
                        dbUser.inactive = false;
                        await dbUser.save();
                        debug.log(`${dbUser.id} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –∞–∫–∫–∞—É–Ω—Ç ${ONLINE_TRACKER}${dbUser.genome}`);
                        const msg = await message.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ${ENV.VERIFIED_BADGE}! –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª–∏...`) as Message;
                        const guilds = await Guild.findAll({where: {premium: true}});
                        await Promise.all(guilds.map((g) => syncMember(g, dbUser)));
                        return msg.edit(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ${ENV.VERIFIED_BADGE}! –†–æ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!`);
                    }
                case false: return message.reply('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π QR-–∫–æ–¥!');
                case null: return message.reply('QR-–∫–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
            }
        } catch (err) {
            console.log(err);
        }
    }

    // @TryCatch(debug)
    private verifyGuild = async (message: Message, dbUser: User) => {
        const prmpt = await combinedPrompt(await message.reply('–≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é QR-–∫–æ–¥–∞?\n–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º Uplay –∏ –Ω–µ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è üòÄ.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –õ–° —Å –±–æ—Ç–æ–º.') as Message, {
            author: message.author,
            emojis: ['‚úÖ', '‚ùé'],
            texts: [['–¥–∞', 'yes', '+'], ['–Ω–µ—Ç', 'no', '-']],
            time: 15 * 60 * 1000,
        });
        switch (prmpt) {
            case 1: return message.reply('–≤—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.');
            case -1: return message.reply('–≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ.');
            case 0: {
                dbUser.requiredVerification = VERIFICATION_LEVEL.QR;
                await dbUser.save();
                await syncMember(await Guild.findByPk(message.guild.id), dbUser);
                debug.log(`—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ <@${dbUser.id}> ${ONLINE_TRACKER}${dbUser.genome}`);
                await (message.member && message.member.voice && message.member.voice.setChannel(null));
                return message.reply('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –õ–°.');
            }
        }

    }
}
