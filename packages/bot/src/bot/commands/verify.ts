import { Guild, User } from '@r6ru/db';
import { VERIFICATION_LEVEL } from '@r6ru/types';
import { combinedPrompt } from '@r6ru/utils';
import { Command } from 'discord-akairo';
import { Message, User as U } from 'discord.js';
import ENV from '../../utils/env';
import { verify } from '../../utils/qr';
import { syncMember } from '../../utils/sync';

interface IArgs {
    target: U;
}

export default class Verify extends Command {
    public constructor() {
        super('verify', {
            aliases: ['verify', 'V'],
            args: [{
                default: (msg: Message) => msg.author,
                id: 'target',
                type: 'user',
            }],
            cooldown: 5000,
        });
    }
    public async exec(message: Message, args: IArgs) {
        const { target } = args;
        if (target.id !== message.author.id && (!(message.member.hasPermission('MANAGE_ROLES')) || ![...this.client.ownerID].includes(message.author.id))) {
            message.reply('–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
        } else {
            return message.channel.type === 'text'
                ? this.verifyMember(message, await User.findByPk(target.id))
                : message.reply('–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö!');
        }
        const UInst = await User.findByPk(message.author.id);
        if (UInst && UInst.genome) {
            if (UInst.verificationLevel >= VERIFICATION_LEVEL.QR) {
                return message.reply('–≤—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç!');
            }
            if (message.channel.type === 'dm') {
                return this.verifyDM(message, UInst);
            } else {
                return this.verifyGuild(message, UInst);
            }
        } else {
            return message.reply('–≤—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!');
        }
    }

    private async verifyMember(message: Message, UInst: User) {
        UInst.requiredVerification = VERIFICATION_LEVEL.QR;
        await UInst.save();
        await syncMember(await Guild.findByPk(message.guild.id), UInst);
    }

    private async verifyDM(message: Message, UInst: User) {
        try {
            if (await verify(UInst.genome, message.author.id)) {
                UInst.verificationLevel = VERIFICATION_LEVEL.QR;
                UInst.inactive = false;
                await UInst.save();
                const msg = await message.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ${ENV.VERIFIED_BADGE}! –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª–∏...`) as Message;
                const guilds = await Guild.findAll({where: {premium: true}});
                await Promise.all(guilds.map((g) => this.client.guilds.get(g.id).members.fetch()));
                await Promise.all(guilds.filter((g) => this.client.guilds.get(g.id).members.has(UInst.id)).map((g) => syncMember(g, UInst)));
                return msg.edit(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç ${ENV.VERIFIED_BADGE}! –†–æ–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, –ø—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!`);
            } else {
                return message.reply('–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π QR-–∫–æ–¥!');
            }
        } catch (err) {
            console.log(err);
            return message.reply('QR-–∫–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        }
    }

    private async verifyGuild(message: Message, UInst: User) {
        const prmpt = await combinedPrompt(await message.reply('–≤—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é QR-–∫–æ–¥–∞?\n–í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º Uplay –∏ –Ω–µ–º–Ω–æ–≥–æ –∂–µ–ª–∞–Ω–∏—è üòÄ.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –õ–° —Å –±–æ—Ç–æ–º.') as Message, {
            author: message.author,
            emojis: ['‚úÖ', '‚ùé'],
            texts: [['–¥–∞', 'yes', '+'], ['–Ω–µ—Ç', 'no', '-']],
            time: 15 * 60 * 1000,
        });
        switch (prmpt) {
            case 1: return message.reply('–≤—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.');
            case -1: return message.reply('–≤—Ä–µ–º—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ.');
            case 0: {
                UInst.requiredVerification = 3;
                await UInst.save();
                await syncMember(await Guild.findByPk(message.guild.id), UInst);
                return message.reply('–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –õ–°.');
            }
        }

    }
}
