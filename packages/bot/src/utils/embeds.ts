import { Lobby, User } from '@r6ru/db';
import { IngameStatus as IS, IUbiBound, ONLINE_TRACKER, RANK_COLORS, RANKS, VERIFICATION_LEVEL } from '@r6ru/types';
import { EmbedField, GuildMember, MessageOptions } from 'discord.js';
import ENV from './env';

const currentlyPlaying = [IS.CASUAL, IS.RANKED, IS.CUSTOM, IS.NEWCOMER, IS.DISCOVERY];

export default {
  appealMsg: async (lobby: Lobby): Promise<MessageOptions> => ({
    embed: {
      author: {
          iconURL: lobby.dcLeader.user.displayAvatarURL(),
          name: ((_) => {
            const slot = lobby.open && lobby.dcChannel.members.size < lobby.dcChannel.userLimit
              ? ` | +${lobby.dcChannel.userLimit - lobby.dcChannel.members.size} —Å–ª–æ—Ç(-–∞)`
              : '';
            switch (_) {
              case IS.CASUAL_SEARCH:
              case IS.RANKED_SEARCH:
              case IS.CUSTOM_SEARCH:
                return `–ü–æ–∏—Å–∫ –º–∞—Ç—á–∞ –≤ ${lobby.dcChannel.name}` + slot;
              case IS.DISCOVERY_SEARCH:
                return `–ü–æ–∏—Å–∫ –†–∞–∑–≤–µ–¥–∫–∏ –≤ ${lobby.dcChannel.name}` + slot;
              case IS.NEWCOMER_SEARCH:
                return `–ü–æ–∏—Å–∫ —Ä–µ–∂–∏–º–∞ –ù–æ–≤–∏—á–æ–∫ –≤ ${lobby.dcChannel.name}` + slot;
              case IS.CASUAL:
              case IS.RANKED:
              case IS.CUSTOM:
                return `–ò–≥—Ä–∞—é—Ç –≤ ${lobby.dcChannel.name}`;
              case IS.NEWCOMER:
                return `–ò–≥—Ä–∞—é—Ç —Ä–µ–∂–∏–º –ù–æ–≤–∏—á–æ–∫ –≤ ${lobby.dcChannel.name}`;
              case IS.TERRORIST_HUNT:
                return `${lobby.dcChannel.name} —Ä–∞–∑–º–∏–Ω–∞–µ—Ç—Å—è –≤ –ê–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä–µ` + slot;
              case IS.DISCOVERY:
                return `${lobby.dcChannel.name} –∏–≥—Ä–∞–µ—Ç –†–∞–∑–≤–µ–¥–∫—É` + slot;
              case IS.OTHER:
              case IS.MENU:
              default:
                return !lobby.open || lobby.dcChannel.members.size >= lobby.dcChannel.userLimit
                  ? `–ì–æ—Ç–æ–≤—ã –∏–≥—Ä–∞—Ç—å –≤ ${lobby.dcChannel.name}`
                  : `–ò—â—É—Ç +${lobby.dcChannel.userLimit - lobby.dcChannel.members.size} –≤ ${lobby.dcChannel.name}`;
            }
          })(lobby.status),
      },
      color: await (async () => {
        const dbUser = (lobby.members.find((m) => m.id === lobby.dcLeader.id) || await User.findByPk(lobby.dcLeader.id));
        return RANK_COLORS[(dbUser && dbUser.rank) || 0];
      })(),
      description:
        (lobby.members
          .sort((a, b) => b.rank - a.rank)
          .map((m) => (lobby.dcLeader.id === m.id ? '\\üëë ' : '')
              + (!m.platform.PC ? '\\üéÆ' : '')
              + `<@${m.id}> (\`${m.nickname}\` - [${Object.entries(m.platform).find((e) => e[1])[0].replace('PC', 'Uplay').replace('PS4', 'PSN').replace('XBOX', 'Xbox LIVE')}](${ONLINE_TRACKER}${m.genome})${(' | ' + m.region).replace(/.+emea/g, '').replace('ncsa', 'üåé').replace('apac', 'üåè')})`
              + ((m.verificationLevel >= VERIFICATION_LEVEL.QR) ? ' ' + ENV.VERIFIED_BADGE : ''))
          .join('\n'))
        + (lobby.description
          ? `\n‚ñ´${lobby.description}`
          : ''),
      fields: (() => {
        const fields: EmbedField[] = [];
        if (lobby.hardplay) {
          fields.push({
            name: '–†–µ–∂–∏–º "HardPlay"',
            value: `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –≤—Ö–æ–¥–∞: \`${RANKS[lobby.guild.rankRoles.findIndex((r) => lobby.guild.rankRoles[lobby.minRank] === r)]}\``,
          });
        }
        if (!lobby.open) {
          fields.push({
            name: '–ó–∞–∫—Ä—ã—Ç–æ–µ –ª–æ–±–±–∏',
            value: '–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∫–æ–≥–æ-–ª–∏–±–æ –∏–∑ –ª–æ–±–±–∏.',
          });
        }
        if ([IS.NEWCOMER, IS.NEWCOMER_SEARCH].includes(lobby.status)) {
          fields.push({
            name: '–†–µ–∂–∏–º "–ù–æ–≤–∏—á–æ–∫"',
            value: '–û–ø—ã—Ç–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º –ª—É—á—à–µ –Ω–∞–π—Ç–∏ –¥—Ä—É–≥—É—é –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–π.',
          });
        }
        if (lobby.open && (lobby.dcChannel.members.size < lobby.dcChannel.userLimit) && !currentlyPlaying.includes(lobby.status)) {
          fields.push({
            name: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
            value: `${lobby.dcInvite.url} üëà`,
          });
        } else if (lobby.open && (lobby.dcChannel.members.size < lobby.dcChannel.userLimit) && currentlyPlaying.includes(lobby.status)) {
          fields.push({
            name: '–õ–æ–±–±–∏ –∏–≥—Ä–∞–µ—Ç',
            value: `–°–µ–π—á–∞—Å –ª—É—á—à–µ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É, —á—Ç–æ–±—ã –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤.`,
          });
        }
        return fields;
      })(),
      footer: {
          iconURL: 'https://i.imgur.com/sDOEWMV.png',
          text: `–í –∏–≥—Ä–µ –Ω–∏–∫–∏ Uplay –æ—Ç–ª–∏—á–∞—é—Ç—Å—è? C–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ —Å–∫—Ä–∏–Ω–æ–º —Ç–∞–±–∞. –° –≤–∞–º–∏ –Ω–µ–Ω–∞–¥–µ–∂–Ω—ã–π –∏–≥—Ä–æ–∫! ID: ${lobby.id}`,
      },
      thumbnail: {
          url: `${ENV.LOBBY_PREVIEW_URL}/${lobby.id}/preview?a${lobby.minRank}.${lobby.maxRank}.${lobby.dcChannel.userLimit - lobby.dcChannel.members.size}=1`,
      },
      timestamp: new Date(),
    },
  }),

  rank: (bound: IUbiBound, stats: {won?: any, lost?: any, kills?: any, deaths?: any}): MessageOptions => ({
    embed: {
      author: {
        name: bound.nickname,
        url: `${ONLINE_TRACKER}${bound.genome}`,
      },
      description: `–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ \`${bound.platform}\``,
      fields: [
        {
          inline: true,
          name: '–í—ã–∏–≥—Ä—ã—à–∏/–ü–æ—Ä–∞–∂–µ–Ω–∏—è',
          value: `**–í:** ${stats.won || 0} **–ü:** ${stats.lost || 0}\n**–í%:** ${(100 * (stats.won / (stats.won + stats.lost) || 0)).toFixed(2)}%`,
        },
        {
          inline: true,
          name: '–£–±–∏–π—Å—Ç–≤–∞/–°–º–µ—Ä—Ç–∏',
          value: `**–£:** ${stats.kills || 0} **–°:** ${stats.deaths || 0}\n**–£/–°:** ${(stats.kills / (stats.deaths || 1)).toFixed(2)}`,
        },
      ],
      thumbnail: {
        url: `https://ubisoft-avatars.akamaized.net/${bound.genome}/default_146_146.png`,
      },
    },
  }),

  appealMsgPremium: (member: GuildMember, description: string, invite: string): MessageOptions => ({
    embed: {
      author: {
        iconURL: member.user.displayAvatarURL(),
        name: `${member.user.tag} –∏—â–µ—Ç +${member.voice.channel.userLimit - member.voice.channel.members.size} –≤ —Å–≤–æ—é —É—é—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É | ${member.voice.channel.name}`,
      },
      color: 12458289,
      fields: [
        {
          name: 'üá∑6‚É£üá∑üá∫',
          value: description || ' ·ûµ·ûµ ·ûµ·ûµ',
        },
        {
          name: '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
          value: `${invite} üëà`,
        },
      ],
      footer: {
        iconURL: 'https://cdn.discordapp.com/emojis/414787874374942721.png?v=1',
        text: `–•–æ—Ç–∏—Ç–µ —Ç–∞–∫ –∂–µ? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –õ–° –°–µ—Ä–≤–µ—Ä–∞, –∫ ${member.guild.members.filter((m) => !m.user.bot && m.hasPermission('MANAGE_GUILD')).map((m) => m.user.tag).join(', ')} –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Nitro Boost`,
      },
      thumbnail: {
        url: member.user.displayAvatarURL(),
      },
      timestamp: new Date(),
    },
  }),
};
